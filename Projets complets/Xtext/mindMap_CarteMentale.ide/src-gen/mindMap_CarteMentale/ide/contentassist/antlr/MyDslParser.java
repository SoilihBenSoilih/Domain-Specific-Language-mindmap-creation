/*
 * generated by Xtext 2.14.0
 */
package mindMap_CarteMentale.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mindMap_CarteMentale.ide.contentassist.antlr.internal.InternalMyDslParser;
import mindMap_CarteMentale.services.MyDslGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMindMapAccess().getGroup(), "rule__MindMap__Group__0");
			builder.put(grammarAccess.getMindMapAccess().getGroup_1(), "rule__MindMap__Group_1__0");
			builder.put(grammarAccess.getCentralTopicAccess().getGroup(), "rule__CentralTopic__Group__0");
			builder.put(grammarAccess.getCentralTopicAccess().getGroup_1(), "rule__CentralTopic__Group_1__0");
			builder.put(grammarAccess.getMainTopicAccess().getGroup(), "rule__MainTopic__Group__0");
			builder.put(grammarAccess.getMainTopicAccess().getGroup_1(), "rule__MainTopic__Group_1__0");
			builder.put(grammarAccess.getSubTopicAccess().getGroup(), "rule__SubTopic__Group__0");
			builder.put(grammarAccess.getSubTopicAccess().getGroup_1(), "rule__SubTopic__Group_1__0");
			builder.put(grammarAccess.getMindMapAccess().getMarkersAssignment_1_1(), "rule__MindMap__MarkersAssignment_1_1");
			builder.put(grammarAccess.getMindMapAccess().getTitleAssignment_2(), "rule__MindMap__TitleAssignment_2");
			builder.put(grammarAccess.getMindMapAccess().getCentraltopicAssignment_3(), "rule__MindMap__CentraltopicAssignment_3");
			builder.put(grammarAccess.getCentralTopicAccess().getMarkersAssignment_1_1(), "rule__CentralTopic__MarkersAssignment_1_1");
			builder.put(grammarAccess.getCentralTopicAccess().getNameAssignment_2(), "rule__CentralTopic__NameAssignment_2");
			builder.put(grammarAccess.getCentralTopicAccess().getMaintopicAssignment_3(), "rule__CentralTopic__MaintopicAssignment_3");
			builder.put(grammarAccess.getMainTopicAccess().getMarkersAssignment_1_1(), "rule__MainTopic__MarkersAssignment_1_1");
			builder.put(grammarAccess.getMainTopicAccess().getNameAssignment_2(), "rule__MainTopic__NameAssignment_2");
			builder.put(grammarAccess.getMainTopicAccess().getSubtopicAssignment_3(), "rule__MainTopic__SubtopicAssignment_3");
			builder.put(grammarAccess.getSubTopicAccess().getMarkersAssignment_1_1(), "rule__SubTopic__MarkersAssignment_1_1");
			builder.put(grammarAccess.getSubTopicAccess().getNameAssignment_2(), "rule__SubTopic__NameAssignment_2");
			builder.put(grammarAccess.getSubTopicAccess().getSubtopicAssignment_3(), "rule__SubTopic__SubtopicAssignment_3");
			builder.put(grammarAccess.getMarkerAccess().getSymbolAssignment(), "rule__Marker__SymbolAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
