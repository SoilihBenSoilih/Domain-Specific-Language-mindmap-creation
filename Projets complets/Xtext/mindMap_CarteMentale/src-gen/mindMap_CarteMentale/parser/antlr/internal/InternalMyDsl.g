/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mindMap_CarteMentale.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mindMap_CarteMentale.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mindMap_CarteMentale.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MindMap";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMindMap
entryRuleMindMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMindMapRule()); }
	iv_ruleMindMap=ruleMindMap
	{ $current=$iv_ruleMindMap.current; }
	EOF;

// Rule MindMap
ruleMindMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MindMap'
		{
			newLeafNode(otherlv_0, grammarAccess.getMindMapAccess().getMindMapKeyword_0());
		}
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getMindMapAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMindMapAccess().getMarkersMarkerParserRuleCall_1_1_0());
					}
					lv_markers_2_0=ruleMarker
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMindMapRule());
						}
						add(
							$current,
							"markers",
							lv_markers_2_0,
							"mindMap_CarteMentale.MyDsl.Marker");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getMindMapAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMindMapAccess().getTitleCHAINEParserRuleCall_2_0());
				}
				lv_title_4_0=ruleCHAINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMindMapRule());
					}
					set(
						$current,
						"title",
						lv_title_4_0,
						"mindMap_CarteMentale.MyDsl.CHAINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMindMapAccess().getCentraltopicCentralTopicParserRuleCall_3_0());
				}
				lv_centraltopic_5_0=ruleCentralTopic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMindMapRule());
					}
					set(
						$current,
						"centraltopic",
						lv_centraltopic_5_0,
						"mindMap_CarteMentale.MyDsl.CentralTopic");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleCentralTopic
entryRuleCentralTopic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCentralTopicRule()); }
	iv_ruleCentralTopic=ruleCentralTopic
	{ $current=$iv_ruleCentralTopic.current; }
	EOF;

// Rule CentralTopic
ruleCentralTopic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CentralTopic'
		{
			newLeafNode(otherlv_0, grammarAccess.getCentralTopicAccess().getCentralTopicKeyword_0());
		}
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getCentralTopicAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCentralTopicAccess().getMarkersMarkerParserRuleCall_1_1_0());
					}
					lv_markers_2_0=ruleMarker
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCentralTopicRule());
						}
						add(
							$current,
							"markers",
							lv_markers_2_0,
							"mindMap_CarteMentale.MyDsl.Marker");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getCentralTopicAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCentralTopicAccess().getNameCHAINEParserRuleCall_2_0());
				}
				lv_name_4_0=ruleCHAINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCentralTopicRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"mindMap_CarteMentale.MyDsl.CHAINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCentralTopicAccess().getMaintopicMainTopicParserRuleCall_3_0());
				}
				lv_maintopic_5_0=ruleMainTopic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCentralTopicRule());
					}
					add(
						$current,
						"maintopic",
						lv_maintopic_5_0,
						"mindMap_CarteMentale.MyDsl.MainTopic");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMainTopic
entryRuleMainTopic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainTopicRule()); }
	iv_ruleMainTopic=ruleMainTopic
	{ $current=$iv_ruleMainTopic.current; }
	EOF;

// Rule MainTopic
ruleMainTopic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MainTopic'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainTopicAccess().getMainTopicKeyword_0());
		}
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getMainTopicAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMainTopicAccess().getMarkersMarkerParserRuleCall_1_1_0());
					}
					lv_markers_2_0=ruleMarker
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainTopicRule());
						}
						add(
							$current,
							"markers",
							lv_markers_2_0,
							"mindMap_CarteMentale.MyDsl.Marker");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getMainTopicAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMainTopicAccess().getNameCHAINEParserRuleCall_2_0());
				}
				lv_name_4_0=ruleCHAINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainTopicRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"mindMap_CarteMentale.MyDsl.CHAINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMainTopicAccess().getSubtopicSubTopicParserRuleCall_3_0());
				}
				lv_subtopic_5_0=ruleSubTopic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainTopicRule());
					}
					add(
						$current,
						"subtopic",
						lv_subtopic_5_0,
						"mindMap_CarteMentale.MyDsl.SubTopic");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSubTopic
entryRuleSubTopic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubTopicRule()); }
	iv_ruleSubTopic=ruleSubTopic
	{ $current=$iv_ruleSubTopic.current; }
	EOF;

// Rule SubTopic
ruleSubTopic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SubTopic'
		{
			newLeafNode(otherlv_0, grammarAccess.getSubTopicAccess().getSubTopicKeyword_0());
		}
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getSubTopicAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubTopicAccess().getMarkersMarkerParserRuleCall_1_1_0());
					}
					lv_markers_2_0=ruleMarker
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubTopicRule());
						}
						add(
							$current,
							"markers",
							lv_markers_2_0,
							"mindMap_CarteMentale.MyDsl.Marker");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getSubTopicAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSubTopicAccess().getNameCHAINEParserRuleCall_2_0());
				}
				lv_name_4_0=ruleCHAINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubTopicRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"mindMap_CarteMentale.MyDsl.CHAINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSubTopicAccess().getSubtopicSubTopicParserRuleCall_3_0());
				}
				lv_subtopic_5_0=ruleSubTopic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubTopicRule());
					}
					add(
						$current,
						"subtopic",
						lv_subtopic_5_0,
						"mindMap_CarteMentale.MyDsl.SubTopic");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMarker
entryRuleMarker returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkerRule()); }
	iv_ruleMarker=ruleMarker
	{ $current=$iv_ruleMarker.current; }
	EOF;

// Rule Marker
ruleMarker returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMarkerAccess().getSymbolENTIERParserRuleCall_0());
			}
			lv_symbol_0_0=ruleENTIER
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMarkerRule());
				}
				set(
					$current,
					"symbol",
					lv_symbol_0_0,
					"mindMap_CarteMentale.MyDsl.ENTIER");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleENTIER
entryRuleENTIER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getENTIERRule()); }
	iv_ruleENTIER=ruleENTIER
	{ $current=$iv_ruleENTIER.current.getText(); }
	EOF;

// Rule ENTIER
ruleENTIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getENTIERAccess().getINTTerminalRuleCall());
		}
	)+
;

// Entry rule entryRuleCHAINE
entryRuleCHAINE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCHAINERule()); }
	iv_ruleCHAINE=ruleCHAINE
	{ $current=$iv_ruleCHAINE.current.getText(); }
	EOF;

// Rule CHAINE
ruleCHAINE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getCHAINEAccess().getIDTerminalRuleCall());
		}
	)+
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
