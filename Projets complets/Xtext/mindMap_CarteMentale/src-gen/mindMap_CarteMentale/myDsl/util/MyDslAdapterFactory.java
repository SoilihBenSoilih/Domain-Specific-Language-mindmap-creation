/**
 * generated by Xtext 2.14.0
 */
package mindMap_CarteMentale.myDsl.util;

import mindMap_CarteMentale.myDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see mindMap_CarteMentale.myDsl.MyDslPackage
 * @generated
 */
public class MyDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslSwitch<Adapter> modelSwitch =
    new MyDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseMindMap(MindMap object)
      {
        return createMindMapAdapter();
      }
      @Override
      public Adapter caseCentralTopic(CentralTopic object)
      {
        return createCentralTopicAdapter();
      }
      @Override
      public Adapter caseMainTopic(MainTopic object)
      {
        return createMainTopicAdapter();
      }
      @Override
      public Adapter caseSubTopic(SubTopic object)
      {
        return createSubTopicAdapter();
      }
      @Override
      public Adapter caseMarker(Marker object)
      {
        return createMarkerAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link mindMap_CarteMentale.myDsl.MindMap <em>Mind Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mindMap_CarteMentale.myDsl.MindMap
   * @generated
   */
  public Adapter createMindMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mindMap_CarteMentale.myDsl.CentralTopic <em>Central Topic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mindMap_CarteMentale.myDsl.CentralTopic
   * @generated
   */
  public Adapter createCentralTopicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mindMap_CarteMentale.myDsl.MainTopic <em>Main Topic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mindMap_CarteMentale.myDsl.MainTopic
   * @generated
   */
  public Adapter createMainTopicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mindMap_CarteMentale.myDsl.SubTopic <em>Sub Topic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mindMap_CarteMentale.myDsl.SubTopic
   * @generated
   */
  public Adapter createSubTopicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mindMap_CarteMentale.myDsl.Marker <em>Marker</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mindMap_CarteMentale.myDsl.Marker
   * @generated
   */
  public Adapter createMarkerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslAdapterFactory
