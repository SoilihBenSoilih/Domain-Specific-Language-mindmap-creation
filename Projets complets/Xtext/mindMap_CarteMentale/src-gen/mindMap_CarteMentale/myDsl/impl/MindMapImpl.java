/**
 * generated by Xtext 2.14.0
 */
package mindMap_CarteMentale.myDsl.impl;

import java.util.Collection;

import mindMap_CarteMentale.myDsl.CentralTopic;
import mindMap_CarteMentale.myDsl.Marker;
import mindMap_CarteMentale.myDsl.MindMap;
import mindMap_CarteMentale.myDsl.MyDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mind Map</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mindMap_CarteMentale.myDsl.impl.MindMapImpl#getMarkers <em>Markers</em>}</li>
 *   <li>{@link mindMap_CarteMentale.myDsl.impl.MindMapImpl#getTitle <em>Title</em>}</li>
 *   <li>{@link mindMap_CarteMentale.myDsl.impl.MindMapImpl#getCentraltopic <em>Centraltopic</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MindMapImpl extends MinimalEObjectImpl.Container implements MindMap
{
  /**
   * The cached value of the '{@link #getMarkers() <em>Markers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMarkers()
   * @generated
   * @ordered
   */
  protected EList<Marker> markers;

  /**
   * The default value of the '{@link #getTitle() <em>Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected static final String TITLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTitle() <em>Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected String title = TITLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getCentraltopic() <em>Centraltopic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCentraltopic()
   * @generated
   * @ordered
   */
  protected CentralTopic centraltopic;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MindMapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MIND_MAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Marker> getMarkers()
  {
    if (markers == null)
    {
      markers = new EObjectContainmentEList<Marker>(Marker.class, this, MyDslPackage.MIND_MAP__MARKERS);
    }
    return markers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTitle()
  {
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTitle(String newTitle)
  {
    String oldTitle = title;
    title = newTitle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MIND_MAP__TITLE, oldTitle, title));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CentralTopic getCentraltopic()
  {
    return centraltopic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCentraltopic(CentralTopic newCentraltopic, NotificationChain msgs)
  {
    CentralTopic oldCentraltopic = centraltopic;
    centraltopic = newCentraltopic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.MIND_MAP__CENTRALTOPIC, oldCentraltopic, newCentraltopic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCentraltopic(CentralTopic newCentraltopic)
  {
    if (newCentraltopic != centraltopic)
    {
      NotificationChain msgs = null;
      if (centraltopic != null)
        msgs = ((InternalEObject)centraltopic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MIND_MAP__CENTRALTOPIC, null, msgs);
      if (newCentraltopic != null)
        msgs = ((InternalEObject)newCentraltopic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MIND_MAP__CENTRALTOPIC, null, msgs);
      msgs = basicSetCentraltopic(newCentraltopic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MIND_MAP__CENTRALTOPIC, newCentraltopic, newCentraltopic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MIND_MAP__MARKERS:
        return ((InternalEList<?>)getMarkers()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MIND_MAP__CENTRALTOPIC:
        return basicSetCentraltopic(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MIND_MAP__MARKERS:
        return getMarkers();
      case MyDslPackage.MIND_MAP__TITLE:
        return getTitle();
      case MyDslPackage.MIND_MAP__CENTRALTOPIC:
        return getCentraltopic();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MIND_MAP__MARKERS:
        getMarkers().clear();
        getMarkers().addAll((Collection<? extends Marker>)newValue);
        return;
      case MyDslPackage.MIND_MAP__TITLE:
        setTitle((String)newValue);
        return;
      case MyDslPackage.MIND_MAP__CENTRALTOPIC:
        setCentraltopic((CentralTopic)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MIND_MAP__MARKERS:
        getMarkers().clear();
        return;
      case MyDslPackage.MIND_MAP__TITLE:
        setTitle(TITLE_EDEFAULT);
        return;
      case MyDslPackage.MIND_MAP__CENTRALTOPIC:
        setCentraltopic((CentralTopic)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MIND_MAP__MARKERS:
        return markers != null && !markers.isEmpty();
      case MyDslPackage.MIND_MAP__TITLE:
        return TITLE_EDEFAULT == null ? title != null : !TITLE_EDEFAULT.equals(title);
      case MyDslPackage.MIND_MAP__CENTRALTOPIC:
        return centraltopic != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (title: ");
    result.append(title);
    result.append(')');
    return result.toString();
  }

} //MindMapImpl
